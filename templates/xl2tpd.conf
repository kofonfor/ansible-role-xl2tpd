;
; Sample l2tpd configuration file
;
; This example file should give you some idea of how the options for l2tpd
; should work.  The best place to look for a list of all options is in
; the source code itself, until I have the time to write better documetation :)
; Specifically, the file "file.c" contains a list of commands at the end.
;
; You most definitely don't have to spell out everything as it is done here
;
[global]								; Global parameters:
port = 1701			 	; * Bind to port 1701
auth file = /etc/ppp/chap-secrets  	; * Where our challenge secrets are
access control = no			; * Refuse connections without IP match
; rand source = dev                     ; Source for entropy for random
;                                       ; numbers, options are:
;                                       ; dev - reads of /dev/urandom
;                                       ; sys - uses rand()
;                                       ; egd - reads from egd socket
;                                       ; egd is not yet implemented
debug avp = no
debug network = no
debug packet = no
debug state = no
debug tunnel = no

{% if xl2tpd_enable_lns %}

[lns default]							; Our fallthrough LNS definition
; exclusive = no						; * Only permit one tunnel per host
ip range = {{ xl2tpd_ip_range }}	; * Allocate from this IP range
; no ip range = 192.168.0.3-192.168.0.9 ; * Except these hosts
; ip range = 192.168.0.5				; * But this one is okay
; ip range = lac1-lac2					; * And anything from lac1 to lac2's IP
; lac = 192.168.1.4 - 192.168.1.8		; * These can connect as LAC's
; no lac = untrusted.marko.net			; * This guy can't connect
; hidden bit = no						; * Use hidden AVP's?
local ip = {{ xl2tpd_local_ip }}				; * Our local IP to use
; local ip range = 192.168.200.0-192.168.200.20   ; Alternatively, use a range for local addressing
length bit = yes						; * Use length bit in payload?
require chap = yes					; * Require CHAP auth. by peer
; refuse pap = yes						; * Refuse PAP authentication
; refuse chap = no						; * Refuse CHAP authentication
; refuse authentication = no			; * Refuse authentication altogether
require authentication = yes			; * Require peer to authenticate
; unix authentication = no				; * Use /etc/passwd for auth.
; name = myhostname						; * Report this as our hostname
; ppp debug = no						; * Turn on PPP debugging
pppoptfile = /etc/ppp/options.xl2tpd	; * ppp options file
; call rws = 10							; * RWS for call (-1 is valid)
; tunnel rws = 4						; * RWS for tunnel (must be > 0)
; flow bit = yes						; * Include sequence numbers
; challenge = yes						; * Challenge authenticate peer ;
; rx bps = 10000000				; Receive tunnel speed
; tx bps = 10000000				; Transmit tunnel speed
; bps = 100000					; Define both receive and transmit speed in one option

{% endif %}

{% for lac in xl2tpd_lac_list %}
[lac {{ lac.name }}]
lns = {{ lac.lns }}
redial = yes
redial timeout = 5
; max redials = 5						; * Give up after n consecutive failures
require chap = yes
require authentication = no
ppp debug = no
pppoptfile = /etc/ppp/peers/{{ lac.name }}
require pap = no
autodial = yes

{% endfor %}
